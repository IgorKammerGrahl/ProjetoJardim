#!/bin/bash

# ======================================================
# SCRIPT DE INICIALIZA√á√ÉO OTIMIZADO (VERS√ÉO FINAL)
# ======================================================

set -euo pipefail

# Configura√ß√µes adapt√°veis
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BUILD_DIR="${PROJECT_DIR}/build"
SRC_DIR="${PROJECT_DIR}/src"
EXECUTABLE="MeuProjetoChai3D"
CONFIG_FILE="games_config.json"
CHAI3D_PATH="/home/igor/chai3d-3.2.0-Makefiles"
SDK_PATH="/home/igor/sdk-3.17.6"

# Fun√ß√£o para mostrar cabe√ßalho
show_header() {
    clear
    printf "\033[1;36m"
    echo "=============================================="
    echo "   Sistema de Jogos Educacionais - APAE"
    echo "=============================================="
    printf "\033[0m"
}

# Fun√ß√£o para tratamento de erros
handle_error() {
    printf "\033[1;31mERRO: %s\033[0m\n" "$1" >&2
    exit 1
}

# Verifica√ß√£o inicial do sistema
pre_check() {
    # Verificar se √© executado como root
    if [ "$(id -u)" -eq 0 ]; then
        handle_error "N√£o execute este script como root/sudo!"
    fi
    
    # Verificar distribui√ß√£o compat√≠vel
    if ! grep -qiE 'ubuntu|debian' /etc/os-release; then
        handle_error "Script compat√≠vel apenas com Ubuntu/Debian"
    fi
}

# Fun√ß√£o para sele√ß√£o de modo
select_mode() {
    show_header
    echo -e "\nSelecione o modo de opera√ß√£o:"
    PS3=$'\nDigite sua op√ß√£o (1-3): '
    options=(
        "Modo Simula√ß√£o (sem hardware h√°ptico)"
        "Modo Completo (com hardware h√°ptico)"
        "Sair"
    )
    select choice in "${options[@]}"; do
        case $REPLY in
            1) prepare_simulation_mode; break ;;
            2) prepare_full_mode; break ;;
            3) exit 0 ;;
            *) echo "Op√ß√£o inv√°lida!"; sleep 1 ;;
        esac
    done
}

# Configura√ß√£o para modo simula√ß√£o
prepare_simulation_mode() {
    show_header
    echo -e "\nüîß Configurando modo simula√ß√£o...\n"
    export DISABLE_HAPTICS=ON
    setup_environment
    build_project
    run_safe_mode
}

# Configura√ß√£o para modo completo
prepare_full_mode() {
    show_header
    echo -e "\nüîß Configurando modo completo...\n"
    export DISABLE_HAPTICS=OFF
    verify_hardware
    setup_environment
    build_project
    run_full_mode
}

# Verifica√ß√£o de hardware h√°ptico
verify_hardware() {
    echo "‚úÖ Verificando hardware..."
    local missing=()
    
    [ ! -d "$CHAI3D_PATH" ] && missing+=("CHAI3D")
    [ ! -d "$SDK_PATH" ] && missing+=("Force Dimension SDK")
    
    if [ ${#missing[@]} -gt 0 ]; then
        handle_error "Componentes faltando: ${missing[*]}"
    fi
    
    if ! lsusb | grep -q "16d0:0"; then
        handle_error "Nenhum dispositivo h√°ptico detectado!"
    fi
}

# Configura√ß√£o do ambiente
setup_environment() {
    echo "‚öôÔ∏è  Configurando ambiente..."
    
    # Configura√ß√£o de grupos
    if ! groups | grep -qw plugdev; then
        echo "Adicionando usu√°rio ao grupo plugdev..."
        sudo usermod -aG plugdev "$USER"
    fi

    # Configurar udev rules
    echo "üìù Aplicando regras udev..."
    sudo tee /etc/udev/rules.d/99-haptic.rules > /dev/null <<EOL
# Force Dimension Devices
SUBSYSTEM=="usb", ATTR{idVendor}=="16d0", MODE="0666", GROUP="plugdev"
EOL

    sudo udevadm control --reload-rules
    sudo udevadm trigger
}

# Instala√ß√£o de depend√™ncias
install_dependencies() {
    echo "üì¶ Verificando depend√™ncias..."
    local deps=(
        build-essential cmake
        libglfw3-dev libglew-dev
        libjsoncpp-dev libusb-1.0-0-dev
        libglu1-mesa-dev libx11-dev
    )

    for dep in "${deps[@]}"; do
        if ! dpkg -s "$dep" &> /dev/null; then
            echo "Instalando $dep..."
            sudo apt-get install -y "$dep" || handle_error "Falha ao instalar $dep"
        fi
    done
}

# Fun√ß√£o para limpeza e prepara√ß√£o do build
prepare_build() {
    echo "üßπ Limpando builds anteriores..."
    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}"
}

# Fun√ß√£o para verificar e copiar configura√ß√µes
handle_config() {
    echo "üìÑ Verificando arquivo de configura√ß√£o..."
    local src_config="${SRC_DIR}/${CONFIG_FILE}"
    local build_config="${BUILD_DIR}/${CONFIG_FILE}"
    
    if [ ! -f "${src_config}" ]; then
        handle_error "Arquivo de configura√ß√£o n√£o encontrado em: ${src_config}"
    fi
    
    cp -v "${src_config}" "${build_config}" || handle_error "Falha ao copiar arquivo de configura√ß√£o"
}

# Fun√ß√£o de compila√ß√£o do projeto
build_project() {
    echo "üèóÔ∏è  Compilando projeto..."
    cd "${BUILD_DIR}"
    
    local build_type="Release"
    local haptic_flag="-DDISABLE_HAPTICS=$DISABLE_HAPTICS"
    
    cmake -DCMAKE_BUILD_TYPE="${build_type}" "${haptic_flag}" .. || handle_error "Falha na configura√ß√£o CMake"
    make -j"$(nproc)" || handle_error "Falha na compila√ß√£o"
    
    handle_config  # Garantir que o arquivo de configura√ß√£o est√° no build
    
    cd ..
}

# Fun√ß√µes de execu√ß√£o
run_safe_mode() {
    show_header
    echo -e "\nüöÄ Iniciando em modo simula√ß√£o...\n"
    cd "${BUILD_DIR}"
    "./${EXECUTABLE}"
}

run_full_mode() {
    show_header
    echo -e "\nüî• Iniciando aplica√ß√£o completa...\n"
    cd "${BUILD_DIR}"
    taskset -c 0 "./${EXECUTABLE}"
}

# Fluxo principal
main_flow() {
    pre_check
    show_header
    install_dependencies
    prepare_build
    select_mode
}

# Ponto de entrada do script
main_flow
